/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface MintingStagesInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ADMIN_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "OG_MINTER_ROLE"
      | "OPERATOR_ROLE"
      | "WL_MINTER_ROLE"
      | "_mintEnd"
      | "_mintMaxPerUser"
      | "_mintPrice"
      | "_mintStart"
      | "_ogMintEnd"
      | "_ogMintMaxPerUser"
      | "_ogMintPrice"
      | "_ogMintStart"
      | "_whitelistMintEnd"
      | "_whitelistMintMaxPerUser"
      | "_whitelistMintPrice"
      | "_whitelistMintStart"
      | "encodeNftParams"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "renounceRole"
      | "revokeRole"
      | "supportsInterface"
      | "updateMintMax"
      | "updateMintPrice"
      | "updateMinterRoles"
      | "updateOGMintMax"
      | "updateOGMintPrice"
      | "updateTime"
      | "updateWLMintMax"
      | "updateWhitelistMintPrice"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Initialized"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "UpdateOgEvent"
      | "UpdateWLevent"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "OG_MINTER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "OPERATOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "WL_MINTER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "_mintEnd", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_mintMaxPerUser",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_mintPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_mintStart",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_ogMintEnd",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_ogMintMaxPerUser",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_ogMintPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_ogMintStart",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_whitelistMintEnd",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_whitelistMintMaxPerUser",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_whitelistMintPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_whitelistMintStart",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "encodeNftParams",
    values: [BigNumberish, BigNumberish, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMintMax",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMintPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMinterRoles",
    values: [AddressLike[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateOGMintMax",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateOGMintPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTime",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateWLMintMax",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateWhitelistMintPrice",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "OG_MINTER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "OPERATOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "WL_MINTER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_mintEnd", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_mintMaxPerUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_mintPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_mintStart", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_ogMintEnd", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_ogMintMaxPerUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_ogMintPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_ogMintStart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_whitelistMintEnd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_whitelistMintMaxPerUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_whitelistMintPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_whitelistMintStart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "encodeNftParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMintMax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMintPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMinterRoles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateOGMintMax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateOGMintPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateTime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateWLMintMax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateWhitelistMintPrice",
    data: BytesLike
  ): Result;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateOgEventEvent {
  export type InputTuple = [sender: AddressLike, listLength: BigNumberish];
  export type OutputTuple = [sender: string, listLength: bigint];
  export interface OutputObject {
    sender: string;
    listLength: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateWLeventEvent {
  export type InputTuple = [sender: AddressLike, listLength: BigNumberish];
  export type OutputTuple = [sender: string, listLength: bigint];
  export interface OutputObject {
    sender: string;
    listLength: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MintingStages extends BaseContract {
  connect(runner?: ContractRunner | null): MintingStages;
  waitForDeployment(): Promise<this>;

  interface: MintingStagesInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  OG_MINTER_ROLE: TypedContractMethod<[], [string], "view">;

  OPERATOR_ROLE: TypedContractMethod<[], [string], "view">;

  WL_MINTER_ROLE: TypedContractMethod<[], [string], "view">;

  _mintEnd: TypedContractMethod<[], [bigint], "view">;

  _mintMaxPerUser: TypedContractMethod<[], [bigint], "view">;

  _mintPrice: TypedContractMethod<[], [bigint], "view">;

  _mintStart: TypedContractMethod<[], [bigint], "view">;

  _ogMintEnd: TypedContractMethod<[], [bigint], "view">;

  _ogMintMaxPerUser: TypedContractMethod<[], [bigint], "view">;

  _ogMintPrice: TypedContractMethod<[], [bigint], "view">;

  _ogMintStart: TypedContractMethod<[], [bigint], "view">;

  _whitelistMintEnd: TypedContractMethod<[], [bigint], "view">;

  _whitelistMintMaxPerUser: TypedContractMethod<[], [bigint], "view">;

  _whitelistMintPrice: TypedContractMethod<[], [bigint], "view">;

  _whitelistMintStart: TypedContractMethod<[], [bigint], "view">;

  encodeNftParams: TypedContractMethod<
    [
      maxSupply: BigNumberish,
      royaltyFee: BigNumberish,
      name: string,
      symbol: string,
      initBaseURI: string
    ],
    [string],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  updateMintMax: TypedContractMethod<
    [mintMax: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateMintPrice: TypedContractMethod<
    [mintPrice: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateMinterRoles: TypedContractMethod<
    [_minterList: AddressLike[], _mintRole: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateOGMintMax: TypedContractMethod<
    [ogMintMax: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateOGMintPrice: TypedContractMethod<
    [price: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateTime: TypedContractMethod<
    [start: BigNumberish, end: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateWLMintMax: TypedContractMethod<
    [whitelistMintMax: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateWhitelistMintPrice: TypedContractMethod<
    [whitelistMintPrice: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "OG_MINTER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "OPERATOR_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "WL_MINTER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "_mintEnd"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "_mintMaxPerUser"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "_mintPrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "_mintStart"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "_ogMintEnd"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "_ogMintMaxPerUser"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "_ogMintPrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "_ogMintStart"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "_whitelistMintEnd"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "_whitelistMintMaxPerUser"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "_whitelistMintPrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "_whitelistMintStart"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "encodeNftParams"
  ): TypedContractMethod<
    [
      maxSupply: BigNumberish,
      royaltyFee: BigNumberish,
      name: string,
      symbol: string,
      initBaseURI: string
    ],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "updateMintMax"
  ): TypedContractMethod<[mintMax: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateMintPrice"
  ): TypedContractMethod<[mintPrice: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateMinterRoles"
  ): TypedContractMethod<
    [_minterList: AddressLike[], _mintRole: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateOGMintMax"
  ): TypedContractMethod<[ogMintMax: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateOGMintPrice"
  ): TypedContractMethod<[price: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateTime"
  ): TypedContractMethod<
    [start: BigNumberish, end: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateWLMintMax"
  ): TypedContractMethod<
    [whitelistMintMax: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateWhitelistMintPrice"
  ): TypedContractMethod<
    [whitelistMintPrice: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "UpdateOgEvent"
  ): TypedContractEvent<
    UpdateOgEventEvent.InputTuple,
    UpdateOgEventEvent.OutputTuple,
    UpdateOgEventEvent.OutputObject
  >;
  getEvent(
    key: "UpdateWLevent"
  ): TypedContractEvent<
    UpdateWLeventEvent.InputTuple,
    UpdateWLeventEvent.OutputTuple,
    UpdateWLeventEvent.OutputObject
  >;

  filters: {
    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "UpdateOgEvent(address,uint256)": TypedContractEvent<
      UpdateOgEventEvent.InputTuple,
      UpdateOgEventEvent.OutputTuple,
      UpdateOgEventEvent.OutputObject
    >;
    UpdateOgEvent: TypedContractEvent<
      UpdateOgEventEvent.InputTuple,
      UpdateOgEventEvent.OutputTuple,
      UpdateOgEventEvent.OutputObject
    >;

    "UpdateWLevent(address,uint256)": TypedContractEvent<
      UpdateWLeventEvent.InputTuple,
      UpdateWLeventEvent.OutputTuple,
      UpdateWLeventEvent.OutputObject
    >;
    UpdateWLevent: TypedContractEvent<
      UpdateWLeventEvent.InputTuple,
      UpdateWLeventEvent.OutputTuple,
      UpdateWLeventEvent.OutputObject
    >;
  };
}
