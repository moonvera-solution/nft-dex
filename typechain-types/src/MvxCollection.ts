/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface MvxCollectionInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ADMIN_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "OG_MINTER_ROLE"
      | "OPERATOR_ROLE"
      | "WL_MINTER_ROLE"
      | "_baseExtension"
      | "_maxSupply"
      | "_mintEnd"
      | "_mintFee"
      | "_mintMaxPerUser"
      | "_mintPrice"
      | "_mintStart"
      | "_mintsPerWallet"
      | "_ogMintEnd"
      | "_ogMintMaxPerUser"
      | "_ogMintPrice"
      | "_ogMintStart"
      | "_royaltyFee"
      | "_whitelistMintEnd"
      | "_whitelistMintMaxPerUser"
      | "_whitelistMintPrice"
      | "_whitelistMintStart"
      | "approve"
      | "balanceOf"
      | "baseURI"
      | "burn"
      | "encodeNftParams"
      | "getApproved"
      | "getMintCountOf"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "isApprovedForAll"
      | "mintForOG"
      | "mintForOwner"
      | "mintForRegular"
      | "mintForWhitelist"
      | "name"
      | "ownerOf"
      | "quoteMints"
      | "quoteOgMints"
      | "quoteWLMints"
      | "renounceRole"
      | "revokeRole"
      | "royaltyInfo"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setApprovalForAll"
      | "setBaseExtension"
      | "setBaseURI"
      | "supportsInterface"
      | "symbol"
      | "tokenURI"
      | "totalSupply"
      | "transferFrom"
      | "updateMintMax"
      | "updateMintPrice"
      | "updateMinterRoles"
      | "updateOGMintMax"
      | "updateOGMintPrice"
      | "updateTime"
      | "updateWLMintMax"
      | "updateWhitelistMintPrice"
      | "version"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "ApprovalForAll"
      | "BurnEvent"
      | "ConsecutiveTransfer"
      | "Initialized"
      | "MintEvent"
      | "OGmintEvent"
      | "OwnerMintEvent"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "Transfer"
      | "UpdateOgEvent"
      | "UpdateWLevent"
      | "WLmintEvent"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "OG_MINTER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "OPERATOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "WL_MINTER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_baseExtension",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_maxSupply",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "_mintEnd", values?: undefined): string;
  encodeFunctionData(functionFragment: "_mintFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_mintMaxPerUser",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_mintPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_mintStart",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_mintsPerWallet",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "_ogMintEnd",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_ogMintMaxPerUser",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_ogMintPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_ogMintStart",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_royaltyFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_whitelistMintEnd",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_whitelistMintMaxPerUser",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_whitelistMintPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_whitelistMintStart",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "baseURI", values?: undefined): string;
  encodeFunctionData(functionFragment: "burn", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "encodeNftParams",
    values: [BigNumberish, BigNumberish, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMintCountOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      BigNumberish,
      BytesLike,
      AddressLike[],
      AddressLike[],
      BigNumberish[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "mintForOG",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintForOwner",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintForRegular",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintForWhitelist",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteMints",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteOgMints",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteWLMints",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "royaltyInfo",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setBaseExtension",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setBaseURI", values: [string]): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMintMax",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMintPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMinterRoles",
    values: [AddressLike[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateOGMintMax",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateOGMintPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTime",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateWLMintMax",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateWhitelistMintPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(functionFragment: "ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "OG_MINTER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "OPERATOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "WL_MINTER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_baseExtension",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_maxSupply", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_mintEnd", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_mintFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_mintMaxPerUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_mintPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_mintStart", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_mintsPerWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_ogMintEnd", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_ogMintMaxPerUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_ogMintPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_ogMintStart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_royaltyFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_whitelistMintEnd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_whitelistMintMaxPerUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_whitelistMintPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_whitelistMintStart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "baseURI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "encodeNftParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMintCountOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintForOG", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintForOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintForRegular",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintForWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "quoteMints", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "quoteOgMints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quoteWLMints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "royaltyInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBaseExtension",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBaseURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMintMax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMintPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMinterRoles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateOGMintMax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateOGMintPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateTime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateWLMintMax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateWhitelistMintPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    approved: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [owner: string, approved: string, tokenId: bigint];
  export interface OutputObject {
    owner: string;
    approved: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalForAllEvent {
  export type InputTuple = [
    owner: AddressLike,
    operator: AddressLike,
    approved: boolean
  ];
  export type OutputTuple = [
    owner: string,
    operator: string,
    approved: boolean
  ];
  export interface OutputObject {
    owner: string;
    operator: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BurnEventEvent {
  export type InputTuple = [sender: AddressLike, tokenId: BigNumberish];
  export type OutputTuple = [sender: string, tokenId: bigint];
  export interface OutputObject {
    sender: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ConsecutiveTransferEvent {
  export type InputTuple = [
    fromTokenId: BigNumberish,
    toTokenId: BigNumberish,
    from: AddressLike,
    to: AddressLike
  ];
  export type OutputTuple = [
    fromTokenId: bigint,
    toTokenId: bigint,
    from: string,
    to: string
  ];
  export interface OutputObject {
    fromTokenId: bigint;
    toTokenId: bigint;
    from: string;
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MintEventEvent {
  export type InputTuple = [
    sender: AddressLike,
    value: BigNumberish,
    to: AddressLike,
    amount: BigNumberish,
    mintPrice: BigNumberish
  ];
  export type OutputTuple = [
    sender: string,
    value: bigint,
    to: string,
    amount: bigint,
    mintPrice: bigint
  ];
  export interface OutputObject {
    sender: string;
    value: bigint;
    to: string;
    amount: bigint;
    mintPrice: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OGmintEventEvent {
  export type InputTuple = [
    sender: AddressLike,
    value: BigNumberish,
    to: AddressLike,
    amount: BigNumberish,
    _ogMintPrice: BigNumberish
  ];
  export type OutputTuple = [
    sender: string,
    value: bigint,
    to: string,
    amount: bigint,
    _ogMintPrice: bigint
  ];
  export interface OutputObject {
    sender: string;
    value: bigint;
    to: string;
    amount: bigint;
    _ogMintPrice: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnerMintEventEvent {
  export type InputTuple = [
    sender: AddressLike,
    to: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [sender: string, to: string, amount: bigint];
  export interface OutputObject {
    sender: string;
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, tokenId: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateOgEventEvent {
  export type InputTuple = [sender: AddressLike, listLength: BigNumberish];
  export type OutputTuple = [sender: string, listLength: bigint];
  export interface OutputObject {
    sender: string;
    listLength: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateWLeventEvent {
  export type InputTuple = [sender: AddressLike, listLength: BigNumberish];
  export type OutputTuple = [sender: string, listLength: bigint];
  export interface OutputObject {
    sender: string;
    listLength: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WLmintEventEvent {
  export type InputTuple = [
    sender: AddressLike,
    value: BigNumberish,
    to: AddressLike,
    amount: BigNumberish,
    wlMintPrice: BigNumberish
  ];
  export type OutputTuple = [
    sender: string,
    value: bigint,
    to: string,
    amount: bigint,
    wlMintPrice: bigint
  ];
  export interface OutputObject {
    sender: string;
    value: bigint;
    to: string;
    amount: bigint;
    wlMintPrice: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MvxCollection extends BaseContract {
  connect(runner?: ContractRunner | null): MvxCollection;
  waitForDeployment(): Promise<this>;

  interface: MvxCollectionInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  OG_MINTER_ROLE: TypedContractMethod<[], [string], "view">;

  OPERATOR_ROLE: TypedContractMethod<[], [string], "view">;

  WL_MINTER_ROLE: TypedContractMethod<[], [string], "view">;

  _baseExtension: TypedContractMethod<[], [string], "view">;

  _maxSupply: TypedContractMethod<[], [bigint], "view">;

  _mintEnd: TypedContractMethod<[], [bigint], "view">;

  _mintFee: TypedContractMethod<[], [bigint], "view">;

  _mintMaxPerUser: TypedContractMethod<[], [bigint], "view">;

  _mintPrice: TypedContractMethod<[], [bigint], "view">;

  _mintStart: TypedContractMethod<[], [bigint], "view">;

  _mintsPerWallet: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  _ogMintEnd: TypedContractMethod<[], [bigint], "view">;

  _ogMintMaxPerUser: TypedContractMethod<[], [bigint], "view">;

  _ogMintPrice: TypedContractMethod<[], [bigint], "view">;

  _ogMintStart: TypedContractMethod<[], [bigint], "view">;

  _royaltyFee: TypedContractMethod<[], [bigint], "view">;

  _whitelistMintEnd: TypedContractMethod<[], [bigint], "view">;

  _whitelistMintMaxPerUser: TypedContractMethod<[], [bigint], "view">;

  _whitelistMintPrice: TypedContractMethod<[], [bigint], "view">;

  _whitelistMintStart: TypedContractMethod<[], [bigint], "view">;

  approve: TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "payable"
  >;

  balanceOf: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  baseURI: TypedContractMethod<[], [string], "view">;

  burn: TypedContractMethod<[tokenId: BigNumberish], [void], "nonpayable">;

  encodeNftParams: TypedContractMethod<
    [
      maxSupply: BigNumberish,
      royaltyFee: BigNumberish,
      name: string,
      symbol: string,
      initBaseURI: string
    ],
    [string],
    "view"
  >;

  getApproved: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  getMintCountOf: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  initialize: TypedContractMethod<
    [
      mintFee: BigNumberish,
      nftData: BytesLike,
      initialOGMinters: AddressLike[],
      initialWLMinters: AddressLike[],
      mintingStages: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  isApprovedForAll: TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;

  mintForOG: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "payable"
  >;

  mintForOwner: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "payable"
  >;

  mintForRegular: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "payable"
  >;

  mintForWhitelist: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "payable"
  >;

  name: TypedContractMethod<[], [string], "view">;

  ownerOf: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  quoteMints: TypedContractMethod<[amount: BigNumberish], [bigint], "view">;

  quoteOgMints: TypedContractMethod<[amount: BigNumberish], [bigint], "view">;

  quoteWLMints: TypedContractMethod<[amount: BigNumberish], [bigint], "view">;

  renounceRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  royaltyInfo: TypedContractMethod<
    [tokenId: BigNumberish, salePrice: BigNumberish],
    [[string, bigint] & { receiver: string; royaltyAmount: bigint }],
    "view"
  >;

  "safeTransferFrom(address,address,uint256)": TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "payable"
  >;

  "safeTransferFrom(address,address,uint256,bytes)": TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      _data: BytesLike
    ],
    [void],
    "payable"
  >;

  setApprovalForAll: TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;

  setBaseExtension: TypedContractMethod<
    [newBaseExtension: string],
    [void],
    "nonpayable"
  >;

  setBaseURI: TypedContractMethod<[newBaseURI: string], [void], "nonpayable">;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  tokenURI: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "payable"
  >;

  updateMintMax: TypedContractMethod<
    [mintMax: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateMintPrice: TypedContractMethod<
    [mintPrice: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateMinterRoles: TypedContractMethod<
    [_minterList: AddressLike[], _mintRole: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateOGMintMax: TypedContractMethod<
    [ogMintMax: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateOGMintPrice: TypedContractMethod<
    [price: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateTime: TypedContractMethod<
    [start: BigNumberish, end: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateWLMintMax: TypedContractMethod<
    [whitelistMintMax: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateWhitelistMintPrice: TypedContractMethod<
    [whitelistMintPrice: BigNumberish],
    [void],
    "nonpayable"
  >;

  version: TypedContractMethod<[], [string], "view">;

  withdraw: TypedContractMethod<[], [void], "payable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "OG_MINTER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "OPERATOR_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "WL_MINTER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "_baseExtension"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "_maxSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "_mintEnd"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "_mintFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "_mintMaxPerUser"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "_mintPrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "_mintStart"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "_mintsPerWallet"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "_ogMintEnd"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "_ogMintMaxPerUser"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "_ogMintPrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "_ogMintStart"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "_royaltyFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "_whitelistMintEnd"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "_whitelistMintMaxPerUser"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "_whitelistMintPrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "_whitelistMintStart"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "baseURI"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "burn"
  ): TypedContractMethod<[tokenId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "encodeNftParams"
  ): TypedContractMethod<
    [
      maxSupply: BigNumberish,
      royaltyFee: BigNumberish,
      name: string,
      symbol: string,
      initBaseURI: string
    ],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getApproved"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getMintCountOf"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      mintFee: BigNumberish,
      nftData: BytesLike,
      initialOGMinters: AddressLike[],
      initialWLMinters: AddressLike[],
      mintingStages: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isApprovedForAll"
  ): TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "mintForOG"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "mintForOwner"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "mintForRegular"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "mintForWhitelist"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ownerOf"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "quoteMints"
  ): TypedContractMethod<[amount: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "quoteOgMints"
  ): TypedContractMethod<[amount: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "quoteWLMints"
  ): TypedContractMethod<[amount: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "royaltyInfo"
  ): TypedContractMethod<
    [tokenId: BigNumberish, salePrice: BigNumberish],
    [[string, bigint] & { receiver: string; royaltyAmount: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256)"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256,bytes)"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      _data: BytesLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "setApprovalForAll"
  ): TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setBaseExtension"
  ): TypedContractMethod<[newBaseExtension: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setBaseURI"
  ): TypedContractMethod<[newBaseURI: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenURI"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "updateMintMax"
  ): TypedContractMethod<[mintMax: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateMintPrice"
  ): TypedContractMethod<[mintPrice: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateMinterRoles"
  ): TypedContractMethod<
    [_minterList: AddressLike[], _mintRole: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateOGMintMax"
  ): TypedContractMethod<[ogMintMax: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateOGMintPrice"
  ): TypedContractMethod<[price: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateTime"
  ): TypedContractMethod<
    [start: BigNumberish, end: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateWLMintMax"
  ): TypedContractMethod<
    [whitelistMintMax: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateWhitelistMintPrice"
  ): TypedContractMethod<
    [whitelistMintPrice: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "version"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[], [void], "payable">;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "ApprovalForAll"
  ): TypedContractEvent<
    ApprovalForAllEvent.InputTuple,
    ApprovalForAllEvent.OutputTuple,
    ApprovalForAllEvent.OutputObject
  >;
  getEvent(
    key: "BurnEvent"
  ): TypedContractEvent<
    BurnEventEvent.InputTuple,
    BurnEventEvent.OutputTuple,
    BurnEventEvent.OutputObject
  >;
  getEvent(
    key: "ConsecutiveTransfer"
  ): TypedContractEvent<
    ConsecutiveTransferEvent.InputTuple,
    ConsecutiveTransferEvent.OutputTuple,
    ConsecutiveTransferEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "MintEvent"
  ): TypedContractEvent<
    MintEventEvent.InputTuple,
    MintEventEvent.OutputTuple,
    MintEventEvent.OutputObject
  >;
  getEvent(
    key: "OGmintEvent"
  ): TypedContractEvent<
    OGmintEventEvent.InputTuple,
    OGmintEventEvent.OutputTuple,
    OGmintEventEvent.OutputObject
  >;
  getEvent(
    key: "OwnerMintEvent"
  ): TypedContractEvent<
    OwnerMintEventEvent.InputTuple,
    OwnerMintEventEvent.OutputTuple,
    OwnerMintEventEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "UpdateOgEvent"
  ): TypedContractEvent<
    UpdateOgEventEvent.InputTuple,
    UpdateOgEventEvent.OutputTuple,
    UpdateOgEventEvent.OutputObject
  >;
  getEvent(
    key: "UpdateWLevent"
  ): TypedContractEvent<
    UpdateWLeventEvent.InputTuple,
    UpdateWLeventEvent.OutputTuple,
    UpdateWLeventEvent.OutputObject
  >;
  getEvent(
    key: "WLmintEvent"
  ): TypedContractEvent<
    WLmintEventEvent.InputTuple,
    WLmintEventEvent.OutputTuple,
    WLmintEventEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "ApprovalForAll(address,address,bool)": TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;
    ApprovalForAll: TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;

    "BurnEvent(address,uint256)": TypedContractEvent<
      BurnEventEvent.InputTuple,
      BurnEventEvent.OutputTuple,
      BurnEventEvent.OutputObject
    >;
    BurnEvent: TypedContractEvent<
      BurnEventEvent.InputTuple,
      BurnEventEvent.OutputTuple,
      BurnEventEvent.OutputObject
    >;

    "ConsecutiveTransfer(uint256,uint256,address,address)": TypedContractEvent<
      ConsecutiveTransferEvent.InputTuple,
      ConsecutiveTransferEvent.OutputTuple,
      ConsecutiveTransferEvent.OutputObject
    >;
    ConsecutiveTransfer: TypedContractEvent<
      ConsecutiveTransferEvent.InputTuple,
      ConsecutiveTransferEvent.OutputTuple,
      ConsecutiveTransferEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "MintEvent(address,uint256,address,uint256,uint256)": TypedContractEvent<
      MintEventEvent.InputTuple,
      MintEventEvent.OutputTuple,
      MintEventEvent.OutputObject
    >;
    MintEvent: TypedContractEvent<
      MintEventEvent.InputTuple,
      MintEventEvent.OutputTuple,
      MintEventEvent.OutputObject
    >;

    "OGmintEvent(address,uint256,address,uint256,uint256)": TypedContractEvent<
      OGmintEventEvent.InputTuple,
      OGmintEventEvent.OutputTuple,
      OGmintEventEvent.OutputObject
    >;
    OGmintEvent: TypedContractEvent<
      OGmintEventEvent.InputTuple,
      OGmintEventEvent.OutputTuple,
      OGmintEventEvent.OutputObject
    >;

    "OwnerMintEvent(address,address,uint256)": TypedContractEvent<
      OwnerMintEventEvent.InputTuple,
      OwnerMintEventEvent.OutputTuple,
      OwnerMintEventEvent.OutputObject
    >;
    OwnerMintEvent: TypedContractEvent<
      OwnerMintEventEvent.InputTuple,
      OwnerMintEventEvent.OutputTuple,
      OwnerMintEventEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "UpdateOgEvent(address,uint256)": TypedContractEvent<
      UpdateOgEventEvent.InputTuple,
      UpdateOgEventEvent.OutputTuple,
      UpdateOgEventEvent.OutputObject
    >;
    UpdateOgEvent: TypedContractEvent<
      UpdateOgEventEvent.InputTuple,
      UpdateOgEventEvent.OutputTuple,
      UpdateOgEventEvent.OutputObject
    >;

    "UpdateWLevent(address,uint256)": TypedContractEvent<
      UpdateWLeventEvent.InputTuple,
      UpdateWLeventEvent.OutputTuple,
      UpdateWLeventEvent.OutputObject
    >;
    UpdateWLevent: TypedContractEvent<
      UpdateWLeventEvent.InputTuple,
      UpdateWLeventEvent.OutputTuple,
      UpdateWLeventEvent.OutputObject
    >;

    "WLmintEvent(address,uint256,address,uint256,uint256)": TypedContractEvent<
      WLmintEventEvent.InputTuple,
      WLmintEventEvent.OutputTuple,
      WLmintEventEvent.OutputObject
    >;
    WLmintEvent: TypedContractEvent<
      WLmintEventEvent.InputTuple,
      WLmintEventEvent.OutputTuple,
      WLmintEventEvent.OutputObject
    >;
  };
}
