/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface MvxFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "_collectionImpl"
      | "_deployFee"
      | "_mintFee"
      | "_owner"
      | "collections"
      | "createCollection"
      | "getTime()"
      | "getTime(uint256)"
      | "members"
      | "setCollectionImpl"
      | "totalCollections"
      | "transferOwnerShip"
      | "updateDeployFee"
      | "updateMember"
      | "updateMintFee"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CreateCloneEvent"
      | "CreateCollectionEvent"
      | "InitCollectionEvent"
      | "InitOwnerEvent"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "_collectionImpl",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_deployFee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "_mintFee", values?: undefined): string;
  encodeFunctionData(functionFragment: "_owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "collections",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createCollection",
    values: [BytesLike, AddressLike[], AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "getTime()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getTime(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "members",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setCollectionImpl",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalCollections",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnerShip",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDeployFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMember",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMintFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "_collectionImpl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_deployFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_mintFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collections",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTime()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTime(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "members", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setCollectionImpl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalCollections",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnerShip",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateDeployFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMintFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace CreateCloneEventEvent {
  export type InputTuple = [
    sender: AddressLike,
    impl: AddressLike,
    cloneAddress: AddressLike
  ];
  export type OutputTuple = [
    sender: string,
    impl: string,
    cloneAddress: string
  ];
  export interface OutputObject {
    sender: string;
    impl: string;
    cloneAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CreateCollectionEventEvent {
  export type InputTuple = [
    sender: AddressLike,
    template: AddressLike,
    clone: AddressLike
  ];
  export type OutputTuple = [sender: string, template: string, clone: string];
  export interface OutputObject {
    sender: string;
    template: string;
    clone: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitCollectionEventEvent {
  export type InputTuple = [sender: AddressLike, collection: AddressLike];
  export type OutputTuple = [sender: string, collection: string];
  export interface OutputObject {
    sender: string;
    collection: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitOwnerEventEvent {
  export type InputTuple = [sender: AddressLike];
  export type OutputTuple = [sender: string];
  export interface OutputObject {
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MvxFactory extends BaseContract {
  connect(runner?: ContractRunner | null): MvxFactory;
  waitForDeployment(): Promise<this>;

  interface: MvxFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  _collectionImpl: TypedContractMethod<[], [string], "view">;

  _deployFee: TypedContractMethod<[], [bigint], "view">;

  _mintFee: TypedContractMethod<[], [bigint], "view">;

  _owner: TypedContractMethod<[], [string], "view">;

  collections: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  createCollection: TypedContractMethod<
    [
      nftsData: BytesLike,
      initialOGMinters: AddressLike[],
      initialWLMinters: AddressLike[],
      mintingStages: BigNumberish[]
    ],
    [string],
    "payable"
  >;

  "getTime()": TypedContractMethod<[], [bigint], "view">;

  "getTime(uint256)": TypedContractMethod<
    [_daysFromNow: BigNumberish],
    [bigint],
    "view"
  >;

  members: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  setCollectionImpl: TypedContractMethod<
    [impl: AddressLike],
    [void],
    "payable"
  >;

  totalCollections: TypedContractMethod<[], [bigint], "view">;

  transferOwnerShip: TypedContractMethod<
    [newOner: AddressLike],
    [void],
    "payable"
  >;

  updateDeployFee: TypedContractMethod<
    [_newFee: BigNumberish],
    [void],
    "payable"
  >;

  updateMember: TypedContractMethod<
    [user: AddressLike, expire: BigNumberish],
    [void],
    "payable"
  >;

  updateMintFee: TypedContractMethod<[fee: BigNumberish], [void], "payable">;

  withdraw: TypedContractMethod<[], [void], "payable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "_collectionImpl"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "_deployFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "_mintFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "_owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "collections"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "createCollection"
  ): TypedContractMethod<
    [
      nftsData: BytesLike,
      initialOGMinters: AddressLike[],
      initialWLMinters: AddressLike[],
      mintingStages: BigNumberish[]
    ],
    [string],
    "payable"
  >;
  getFunction(
    nameOrSignature: "getTime()"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTime(uint256)"
  ): TypedContractMethod<[_daysFromNow: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "members"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "setCollectionImpl"
  ): TypedContractMethod<[impl: AddressLike], [void], "payable">;
  getFunction(
    nameOrSignature: "totalCollections"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnerShip"
  ): TypedContractMethod<[newOner: AddressLike], [void], "payable">;
  getFunction(
    nameOrSignature: "updateDeployFee"
  ): TypedContractMethod<[_newFee: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "updateMember"
  ): TypedContractMethod<
    [user: AddressLike, expire: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "updateMintFee"
  ): TypedContractMethod<[fee: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[], [void], "payable">;

  getEvent(
    key: "CreateCloneEvent"
  ): TypedContractEvent<
    CreateCloneEventEvent.InputTuple,
    CreateCloneEventEvent.OutputTuple,
    CreateCloneEventEvent.OutputObject
  >;
  getEvent(
    key: "CreateCollectionEvent"
  ): TypedContractEvent<
    CreateCollectionEventEvent.InputTuple,
    CreateCollectionEventEvent.OutputTuple,
    CreateCollectionEventEvent.OutputObject
  >;
  getEvent(
    key: "InitCollectionEvent"
  ): TypedContractEvent<
    InitCollectionEventEvent.InputTuple,
    InitCollectionEventEvent.OutputTuple,
    InitCollectionEventEvent.OutputObject
  >;
  getEvent(
    key: "InitOwnerEvent"
  ): TypedContractEvent<
    InitOwnerEventEvent.InputTuple,
    InitOwnerEventEvent.OutputTuple,
    InitOwnerEventEvent.OutputObject
  >;

  filters: {
    "CreateCloneEvent(address,address,address)": TypedContractEvent<
      CreateCloneEventEvent.InputTuple,
      CreateCloneEventEvent.OutputTuple,
      CreateCloneEventEvent.OutputObject
    >;
    CreateCloneEvent: TypedContractEvent<
      CreateCloneEventEvent.InputTuple,
      CreateCloneEventEvent.OutputTuple,
      CreateCloneEventEvent.OutputObject
    >;

    "CreateCollectionEvent(address,address,address)": TypedContractEvent<
      CreateCollectionEventEvent.InputTuple,
      CreateCollectionEventEvent.OutputTuple,
      CreateCollectionEventEvent.OutputObject
    >;
    CreateCollectionEvent: TypedContractEvent<
      CreateCollectionEventEvent.InputTuple,
      CreateCollectionEventEvent.OutputTuple,
      CreateCollectionEventEvent.OutputObject
    >;

    "InitCollectionEvent(address,address)": TypedContractEvent<
      InitCollectionEventEvent.InputTuple,
      InitCollectionEventEvent.OutputTuple,
      InitCollectionEventEvent.OutputObject
    >;
    InitCollectionEvent: TypedContractEvent<
      InitCollectionEventEvent.InputTuple,
      InitCollectionEventEvent.OutputTuple,
      InitCollectionEventEvent.OutputObject
    >;

    "InitOwnerEvent(address)": TypedContractEvent<
      InitOwnerEventEvent.InputTuple,
      InitOwnerEventEvent.OutputTuple,
      InitOwnerEventEvent.OutputObject
    >;
    InitOwnerEvent: TypedContractEvent<
      InitOwnerEventEvent.InputTuple,
      InitOwnerEventEvent.OutputTuple,
      InitOwnerEventEvent.OutputObject
    >;
  };
}
