/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export type MemberStruct = {
  collection: AddressLike;
  deployFee: BigNumberish;
  platformFee: BigNumberish;
  discount: BigNumberish;
  expiration: BigNumberish;
};

export type MemberStructOutput = [
  collection: string,
  deployFee: bigint,
  platformFee: bigint,
  discount: bigint,
  expiration: bigint
] & {
  collection: string;
  deployFee: bigint;
  platformFee: bigint;
  discount: bigint;
  expiration: bigint;
};

export type PartnerStruct = {
  collection: AddressLike;
  admin: AddressLike;
  adminOwnPercent: BigNumberish;
  referralOwnPercent: BigNumberish;
  discount: BigNumberish;
  balance: BigNumberish;
  expiration: BigNumberish;
};

export type PartnerStructOutput = [
  collection: string,
  admin: string,
  adminOwnPercent: bigint,
  referralOwnPercent: bigint,
  discount: bigint,
  balance: bigint,
  expiration: bigint
] & {
  collection: string;
  admin: string;
  adminOwnPercent: bigint;
  referralOwnPercent: bigint;
  discount: bigint;
  balance: bigint;
  expiration: bigint;
};

export type CollectionStruct = {
  name: string;
  symbol: string;
  baseURI: string;
  baseExt: string;
  royaltyReceiver: AddressLike;
  maxSupply: BigNumberish;
  royaltyFee: BigNumberish;
};

export type CollectionStructOutput = [
  name: string,
  symbol: string,
  baseURI: string,
  baseExt: string,
  royaltyReceiver: string,
  maxSupply: bigint,
  royaltyFee: bigint
] & {
  name: string;
  symbol: string;
  baseURI: string;
  baseExt: string;
  royaltyReceiver: string;
  maxSupply: bigint;
  royaltyFee: bigint;
};

export type StagesStruct = {
  isMaxSupplyUpdatable: boolean;
  ogMintPrice: BigNumberish;
  whitelistMintPrice: BigNumberish;
  mintPrice: BigNumberish;
  mintMaxPerUser: BigNumberish;
  ogMintMaxPerUser: BigNumberish;
  mintStart: BigNumberish;
  mintEnd: BigNumberish;
  ogMintStart: BigNumberish;
  ogMintEnd: BigNumberish;
  whitelistMintStart: BigNumberish;
  whitelistMintEnd: BigNumberish;
  whitelistMintMaxPerUser: BigNumberish;
};

export type StagesStructOutput = [
  isMaxSupplyUpdatable: boolean,
  ogMintPrice: bigint,
  whitelistMintPrice: bigint,
  mintPrice: bigint,
  mintMaxPerUser: bigint,
  ogMintMaxPerUser: bigint,
  mintStart: bigint,
  mintEnd: bigint,
  ogMintStart: bigint,
  ogMintEnd: bigint,
  whitelistMintStart: bigint,
  whitelistMintEnd: bigint,
  whitelistMintMaxPerUser: bigint
] & {
  isMaxSupplyUpdatable: boolean;
  ogMintPrice: bigint;
  whitelistMintPrice: bigint;
  mintPrice: bigint;
  mintMaxPerUser: bigint;
  ogMintMaxPerUser: bigint;
  mintStart: bigint;
  mintEnd: bigint;
  ogMintStart: bigint;
  ogMintEnd: bigint;
  whitelistMintStart: bigint;
  whitelistMintEnd: bigint;
  whitelistMintMaxPerUser: bigint;
};

export interface MvxFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "artists"
      | "collectionCount"
      | "collectionImpl"
      | "createCollection"
      | "getPartnerBalance"
      | "getReferralBalance"
      | "getTime()"
      | "getTime(uint256)"
      | "grantReferral"
      | "initialize"
      | "members"
      | "owner"
      | "partners"
      | "proxiableUUID"
      | "publicStageWeeks"
      | "renounceOwnership"
      | "transferOwnership"
      | "updateCollectionImpl"
      | "updateMember"
      | "updatePartnership"
      | "updateStageDateFtr"
      | "updateStageFee"
      | "upgradeTo"
      | "upgradeToAndCall"
      | "withdraw"
      | "withdrawPartner"
      | "withdrawReferral"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AdminChanged"
      | "ArtistDiscount"
      | "BeaconUpgraded"
      | "CreateEvent"
      | "FactoryBalanceUpdate"
      | "GrantReferralDiscount"
      | "Initialized"
      | "Log(string,uint256)"
      | "Log(string,address)"
      | "MemberDiscount"
      | "OwnershipTransferred"
      | "PartnerBalanceUpdate"
      | "ReferralBalanceUpdate"
      | "UpdateCollectionImpl"
      | "UpdateMember"
      | "UpdatePartner"
      | "Upgraded"
      | "WithdrawAdmin"
      | "WithdrawPartner"
      | "WithdrawReferral"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "artists",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "collectionCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collectionImpl",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createCollection",
    values: [CollectionStruct, StagesStruct, AddressLike[], AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getPartnerBalance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getReferralBalance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "getTime()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getTime(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "grantReferral",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "members",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "partners",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "publicStageWeeks",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCollectionImpl",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMember",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePartnership",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateStageDateFtr",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateStageFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawPartner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawReferral",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "artists", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collectionCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectionImpl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPartnerBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReferralBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTime()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTime(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantReferral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "members", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "partners", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "publicStageWeeks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCollectionImpl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePartnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateStageDateFtr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateStageFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawPartner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawReferral",
    data: BytesLike
  ): Result;
}

export namespace AdminChangedEvent {
  export type InputTuple = [previousAdmin: AddressLike, newAdmin: AddressLike];
  export type OutputTuple = [previousAdmin: string, newAdmin: string];
  export interface OutputObject {
    previousAdmin: string;
    newAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ArtistDiscountEvent {
  export type InputTuple = [
    _sender: AddressLike,
    _deployFee: BigNumberish,
    _discountAmt: BigNumberish
  ];
  export type OutputTuple = [
    _sender: string,
    _deployFee: bigint,
    _discountAmt: bigint
  ];
  export interface OutputObject {
    _sender: string;
    _deployFee: bigint;
    _discountAmt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BeaconUpgradedEvent {
  export type InputTuple = [beacon: AddressLike];
  export type OutputTuple = [beacon: string];
  export interface OutputObject {
    beacon: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CreateEventEvent {
  export type InputTuple = [
    _sender: AddressLike,
    _impl: AddressLike,
    _cloneAddress: AddressLike
  ];
  export type OutputTuple = [
    _sender: string,
    _impl: string,
    _cloneAddress: string
  ];
  export interface OutputObject {
    _sender: string;
    _impl: string;
    _cloneAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FactoryBalanceUpdateEvent {
  export type InputTuple = [arg0: BigNumberish];
  export type OutputTuple = [arg0: bigint];
  export interface OutputObject {
    arg0: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GrantReferralDiscountEvent {
  export type InputTuple = [
    _artist: AddressLike,
    _sender: AddressLike,
    _collection: AddressLike
  ];
  export type OutputTuple = [
    _artist: string,
    _sender: string,
    _collection: string
  ];
  export interface OutputObject {
    _artist: string;
    _sender: string;
    _collection: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace Log_string_uint256_Event {
  export type InputTuple = [arg0: string, arg1: BigNumberish];
  export type OutputTuple = [arg0: string, arg1: bigint];
  export interface OutputObject {
    arg0: string;
    arg1: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace Log_string_address_Event {
  export type InputTuple = [arg0: string, arg1: AddressLike];
  export type OutputTuple = [arg0: string, arg1: string];
  export interface OutputObject {
    arg0: string;
    arg1: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MemberDiscountEvent {
  export type InputTuple = [
    _sender: AddressLike,
    _deployFee: BigNumberish,
    _discountAmt: BigNumberish
  ];
  export type OutputTuple = [
    _sender: string,
    _deployFee: bigint,
    _discountAmt: bigint
  ];
  export interface OutputObject {
    _sender: string;
    _deployFee: bigint;
    _discountAmt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PartnerBalanceUpdateEvent {
  export type InputTuple = [_partner: AddressLike, _balance: BigNumberish];
  export type OutputTuple = [_partner: string, _balance: bigint];
  export interface OutputObject {
    _partner: string;
    _balance: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReferralBalanceUpdateEvent {
  export type InputTuple = [_referral: AddressLike, _amount: BigNumberish];
  export type OutputTuple = [_referral: string, _amount: bigint];
  export interface OutputObject {
    _referral: string;
    _amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateCollectionImplEvent {
  export type InputTuple = [_newImpl: AddressLike];
  export type OutputTuple = [_newImpl: string];
  export interface OutputObject {
    _newImpl: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateMemberEvent {
  export type InputTuple = [arg0: MemberStruct];
  export type OutputTuple = [arg0: MemberStructOutput];
  export interface OutputObject {
    arg0: MemberStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdatePartnerEvent {
  export type InputTuple = [arg0: PartnerStruct];
  export type OutputTuple = [arg0: PartnerStructOutput];
  export interface OutputObject {
    arg0: PartnerStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawAdminEvent {
  export type InputTuple = [amount: BigNumberish];
  export type OutputTuple = [amount: bigint];
  export interface OutputObject {
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawPartnerEvent {
  export type InputTuple = [
    _sender: AddressLike,
    _collection: AddressLike,
    _balance: BigNumberish
  ];
  export type OutputTuple = [
    _sender: string,
    _collection: string,
    _balance: bigint
  ];
  export interface OutputObject {
    _sender: string;
    _collection: string;
    _balance: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawReferralEvent {
  export type InputTuple = [
    _sender: AddressLike,
    _artist: AddressLike,
    _referralBalance: BigNumberish
  ];
  export type OutputTuple = [
    _sender: string,
    _artist: string,
    _referralBalance: bigint
  ];
  export interface OutputObject {
    _sender: string;
    _artist: string;
    _referralBalance: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MvxFactory extends BaseContract {
  connect(runner?: ContractRunner | null): MvxFactory;
  waitForDeployment(): Promise<this>;

  interface: MvxFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  artists: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, bigint] & {
        referral: string;
        collection: string;
        referralBalance: bigint;
      }
    ],
    "view"
  >;

  collectionCount: TypedContractMethod<[], [bigint], "view">;

  collectionImpl: TypedContractMethod<[], [string], "view">;

  createCollection: TypedContractMethod<
    [
      _nftsData: CollectionStruct,
      _mintingStages: StagesStruct,
      _ogs: AddressLike[],
      _wls: AddressLike[]
    ],
    [string],
    "payable"
  >;

  getPartnerBalance: TypedContractMethod<
    [_collection: AddressLike],
    [bigint],
    "view"
  >;

  getReferralBalance: TypedContractMethod<
    [_artist: AddressLike],
    [bigint],
    "view"
  >;

  "getTime()": TypedContractMethod<[], [bigint], "view">;

  "getTime(uint256)": TypedContractMethod<
    [_daysFromNow: BigNumberish],
    [bigint],
    "view"
  >;

  grantReferral: TypedContractMethod<
    [_extCollection: AddressLike, _artist: AddressLike],
    [void],
    "nonpayable"
  >;

  initialize: TypedContractMethod<[], [void], "nonpayable">;

  members: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, bigint, bigint, bigint, bigint] & {
        collection: string;
        deployFee: bigint;
        platformFee: bigint;
        discount: bigint;
        expiration: bigint;
      }
    ],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  partners: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, bigint, bigint, bigint, bigint, bigint] & {
        collection: string;
        admin: string;
        adminOwnPercent: bigint;
        referralOwnPercent: bigint;
        discount: bigint;
        balance: bigint;
        expiration: bigint;
      }
    ],
    "view"
  >;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  publicStageWeeks: TypedContractMethod<[], [bigint], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateCollectionImpl: TypedContractMethod<
    [_impl: AddressLike],
    [void],
    "payable"
  >;

  updateMember: TypedContractMethod<
    [
      _newMember: AddressLike,
      _collection: AddressLike,
      _deployFee: BigNumberish,
      _platformFee: BigNumberish,
      _discount: BigNumberish,
      _expirationDays: BigNumberish
    ],
    [void],
    "payable"
  >;

  updatePartnership: TypedContractMethod<
    [
      _collection: AddressLike,
      _admin: AddressLike,
      _adminOwnPercent: BigNumberish,
      _referralOwnPercent: BigNumberish,
      _discountPercent: BigNumberish,
      _expireDaysFromNow: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  updateStageDateFtr: TypedContractMethod<
    [_publicStageWeeks: BigNumberish, _updateStageFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateStageFee: TypedContractMethod<[], [bigint], "view">;

  upgradeTo: TypedContractMethod<
    [_newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  withdraw: TypedContractMethod<[], [void], "payable">;

  withdrawPartner: TypedContractMethod<
    [_collection: AddressLike],
    [void],
    "nonpayable"
  >;

  withdrawReferral: TypedContractMethod<
    [artist_: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "artists"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, bigint] & {
        referral: string;
        collection: string;
        referralBalance: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "collectionCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "collectionImpl"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "createCollection"
  ): TypedContractMethod<
    [
      _nftsData: CollectionStruct,
      _mintingStages: StagesStruct,
      _ogs: AddressLike[],
      _wls: AddressLike[]
    ],
    [string],
    "payable"
  >;
  getFunction(
    nameOrSignature: "getPartnerBalance"
  ): TypedContractMethod<[_collection: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getReferralBalance"
  ): TypedContractMethod<[_artist: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTime()"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTime(uint256)"
  ): TypedContractMethod<[_daysFromNow: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "grantReferral"
  ): TypedContractMethod<
    [_extCollection: AddressLike, _artist: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "members"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, bigint, bigint, bigint, bigint] & {
        collection: string;
        deployFee: bigint;
        platformFee: bigint;
        discount: bigint;
        expiration: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "partners"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, bigint, bigint, bigint, bigint, bigint] & {
        collection: string;
        admin: string;
        adminOwnPercent: bigint;
        referralOwnPercent: bigint;
        discount: bigint;
        balance: bigint;
        expiration: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "publicStageWeeks"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateCollectionImpl"
  ): TypedContractMethod<[_impl: AddressLike], [void], "payable">;
  getFunction(
    nameOrSignature: "updateMember"
  ): TypedContractMethod<
    [
      _newMember: AddressLike,
      _collection: AddressLike,
      _deployFee: BigNumberish,
      _platformFee: BigNumberish,
      _discount: BigNumberish,
      _expirationDays: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "updatePartnership"
  ): TypedContractMethod<
    [
      _collection: AddressLike,
      _admin: AddressLike,
      _adminOwnPercent: BigNumberish,
      _referralOwnPercent: BigNumberish,
      _discountPercent: BigNumberish,
      _expireDaysFromNow: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateStageDateFtr"
  ): TypedContractMethod<
    [_publicStageWeeks: BigNumberish, _updateStageFee: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateStageFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "upgradeTo"
  ): TypedContractMethod<
    [_newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "withdrawPartner"
  ): TypedContractMethod<[_collection: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawReferral"
  ): TypedContractMethod<[artist_: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "AdminChanged"
  ): TypedContractEvent<
    AdminChangedEvent.InputTuple,
    AdminChangedEvent.OutputTuple,
    AdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "ArtistDiscount"
  ): TypedContractEvent<
    ArtistDiscountEvent.InputTuple,
    ArtistDiscountEvent.OutputTuple,
    ArtistDiscountEvent.OutputObject
  >;
  getEvent(
    key: "BeaconUpgraded"
  ): TypedContractEvent<
    BeaconUpgradedEvent.InputTuple,
    BeaconUpgradedEvent.OutputTuple,
    BeaconUpgradedEvent.OutputObject
  >;
  getEvent(
    key: "CreateEvent"
  ): TypedContractEvent<
    CreateEventEvent.InputTuple,
    CreateEventEvent.OutputTuple,
    CreateEventEvent.OutputObject
  >;
  getEvent(
    key: "FactoryBalanceUpdate"
  ): TypedContractEvent<
    FactoryBalanceUpdateEvent.InputTuple,
    FactoryBalanceUpdateEvent.OutputTuple,
    FactoryBalanceUpdateEvent.OutputObject
  >;
  getEvent(
    key: "GrantReferralDiscount"
  ): TypedContractEvent<
    GrantReferralDiscountEvent.InputTuple,
    GrantReferralDiscountEvent.OutputTuple,
    GrantReferralDiscountEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "Log(string,uint256)"
  ): TypedContractEvent<
    Log_string_uint256_Event.InputTuple,
    Log_string_uint256_Event.OutputTuple,
    Log_string_uint256_Event.OutputObject
  >;
  getEvent(
    key: "Log(string,address)"
  ): TypedContractEvent<
    Log_string_address_Event.InputTuple,
    Log_string_address_Event.OutputTuple,
    Log_string_address_Event.OutputObject
  >;
  getEvent(
    key: "MemberDiscount"
  ): TypedContractEvent<
    MemberDiscountEvent.InputTuple,
    MemberDiscountEvent.OutputTuple,
    MemberDiscountEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PartnerBalanceUpdate"
  ): TypedContractEvent<
    PartnerBalanceUpdateEvent.InputTuple,
    PartnerBalanceUpdateEvent.OutputTuple,
    PartnerBalanceUpdateEvent.OutputObject
  >;
  getEvent(
    key: "ReferralBalanceUpdate"
  ): TypedContractEvent<
    ReferralBalanceUpdateEvent.InputTuple,
    ReferralBalanceUpdateEvent.OutputTuple,
    ReferralBalanceUpdateEvent.OutputObject
  >;
  getEvent(
    key: "UpdateCollectionImpl"
  ): TypedContractEvent<
    UpdateCollectionImplEvent.InputTuple,
    UpdateCollectionImplEvent.OutputTuple,
    UpdateCollectionImplEvent.OutputObject
  >;
  getEvent(
    key: "UpdateMember"
  ): TypedContractEvent<
    UpdateMemberEvent.InputTuple,
    UpdateMemberEvent.OutputTuple,
    UpdateMemberEvent.OutputObject
  >;
  getEvent(
    key: "UpdatePartner"
  ): TypedContractEvent<
    UpdatePartnerEvent.InputTuple,
    UpdatePartnerEvent.OutputTuple,
    UpdatePartnerEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawAdmin"
  ): TypedContractEvent<
    WithdrawAdminEvent.InputTuple,
    WithdrawAdminEvent.OutputTuple,
    WithdrawAdminEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawPartner"
  ): TypedContractEvent<
    WithdrawPartnerEvent.InputTuple,
    WithdrawPartnerEvent.OutputTuple,
    WithdrawPartnerEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawReferral"
  ): TypedContractEvent<
    WithdrawReferralEvent.InputTuple,
    WithdrawReferralEvent.OutputTuple,
    WithdrawReferralEvent.OutputObject
  >;

  filters: {
    "AdminChanged(address,address)": TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;
    AdminChanged: TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;

    "ArtistDiscount(address,uint256,uint256)": TypedContractEvent<
      ArtistDiscountEvent.InputTuple,
      ArtistDiscountEvent.OutputTuple,
      ArtistDiscountEvent.OutputObject
    >;
    ArtistDiscount: TypedContractEvent<
      ArtistDiscountEvent.InputTuple,
      ArtistDiscountEvent.OutputTuple,
      ArtistDiscountEvent.OutputObject
    >;

    "BeaconUpgraded(address)": TypedContractEvent<
      BeaconUpgradedEvent.InputTuple,
      BeaconUpgradedEvent.OutputTuple,
      BeaconUpgradedEvent.OutputObject
    >;
    BeaconUpgraded: TypedContractEvent<
      BeaconUpgradedEvent.InputTuple,
      BeaconUpgradedEvent.OutputTuple,
      BeaconUpgradedEvent.OutputObject
    >;

    "CreateEvent(address,address,address)": TypedContractEvent<
      CreateEventEvent.InputTuple,
      CreateEventEvent.OutputTuple,
      CreateEventEvent.OutputObject
    >;
    CreateEvent: TypedContractEvent<
      CreateEventEvent.InputTuple,
      CreateEventEvent.OutputTuple,
      CreateEventEvent.OutputObject
    >;

    "FactoryBalanceUpdate(uint256)": TypedContractEvent<
      FactoryBalanceUpdateEvent.InputTuple,
      FactoryBalanceUpdateEvent.OutputTuple,
      FactoryBalanceUpdateEvent.OutputObject
    >;
    FactoryBalanceUpdate: TypedContractEvent<
      FactoryBalanceUpdateEvent.InputTuple,
      FactoryBalanceUpdateEvent.OutputTuple,
      FactoryBalanceUpdateEvent.OutputObject
    >;

    "GrantReferralDiscount(address,address,address)": TypedContractEvent<
      GrantReferralDiscountEvent.InputTuple,
      GrantReferralDiscountEvent.OutputTuple,
      GrantReferralDiscountEvent.OutputObject
    >;
    GrantReferralDiscount: TypedContractEvent<
      GrantReferralDiscountEvent.InputTuple,
      GrantReferralDiscountEvent.OutputTuple,
      GrantReferralDiscountEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "Log(string,uint256)": TypedContractEvent<
      Log_string_uint256_Event.InputTuple,
      Log_string_uint256_Event.OutputTuple,
      Log_string_uint256_Event.OutputObject
    >;
    "Log(string,address)": TypedContractEvent<
      Log_string_address_Event.InputTuple,
      Log_string_address_Event.OutputTuple,
      Log_string_address_Event.OutputObject
    >;

    "MemberDiscount(address,uint256,uint256)": TypedContractEvent<
      MemberDiscountEvent.InputTuple,
      MemberDiscountEvent.OutputTuple,
      MemberDiscountEvent.OutputObject
    >;
    MemberDiscount: TypedContractEvent<
      MemberDiscountEvent.InputTuple,
      MemberDiscountEvent.OutputTuple,
      MemberDiscountEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PartnerBalanceUpdate(address,uint256)": TypedContractEvent<
      PartnerBalanceUpdateEvent.InputTuple,
      PartnerBalanceUpdateEvent.OutputTuple,
      PartnerBalanceUpdateEvent.OutputObject
    >;
    PartnerBalanceUpdate: TypedContractEvent<
      PartnerBalanceUpdateEvent.InputTuple,
      PartnerBalanceUpdateEvent.OutputTuple,
      PartnerBalanceUpdateEvent.OutputObject
    >;

    "ReferralBalanceUpdate(address,uint256)": TypedContractEvent<
      ReferralBalanceUpdateEvent.InputTuple,
      ReferralBalanceUpdateEvent.OutputTuple,
      ReferralBalanceUpdateEvent.OutputObject
    >;
    ReferralBalanceUpdate: TypedContractEvent<
      ReferralBalanceUpdateEvent.InputTuple,
      ReferralBalanceUpdateEvent.OutputTuple,
      ReferralBalanceUpdateEvent.OutputObject
    >;

    "UpdateCollectionImpl(address)": TypedContractEvent<
      UpdateCollectionImplEvent.InputTuple,
      UpdateCollectionImplEvent.OutputTuple,
      UpdateCollectionImplEvent.OutputObject
    >;
    UpdateCollectionImpl: TypedContractEvent<
      UpdateCollectionImplEvent.InputTuple,
      UpdateCollectionImplEvent.OutputTuple,
      UpdateCollectionImplEvent.OutputObject
    >;

    "UpdateMember(tuple)": TypedContractEvent<
      UpdateMemberEvent.InputTuple,
      UpdateMemberEvent.OutputTuple,
      UpdateMemberEvent.OutputObject
    >;
    UpdateMember: TypedContractEvent<
      UpdateMemberEvent.InputTuple,
      UpdateMemberEvent.OutputTuple,
      UpdateMemberEvent.OutputObject
    >;

    "UpdatePartner(tuple)": TypedContractEvent<
      UpdatePartnerEvent.InputTuple,
      UpdatePartnerEvent.OutputTuple,
      UpdatePartnerEvent.OutputObject
    >;
    UpdatePartner: TypedContractEvent<
      UpdatePartnerEvent.InputTuple,
      UpdatePartnerEvent.OutputTuple,
      UpdatePartnerEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;

    "WithdrawAdmin(uint256)": TypedContractEvent<
      WithdrawAdminEvent.InputTuple,
      WithdrawAdminEvent.OutputTuple,
      WithdrawAdminEvent.OutputObject
    >;
    WithdrawAdmin: TypedContractEvent<
      WithdrawAdminEvent.InputTuple,
      WithdrawAdminEvent.OutputTuple,
      WithdrawAdminEvent.OutputObject
    >;

    "WithdrawPartner(address,address,uint256)": TypedContractEvent<
      WithdrawPartnerEvent.InputTuple,
      WithdrawPartnerEvent.OutputTuple,
      WithdrawPartnerEvent.OutputObject
    >;
    WithdrawPartner: TypedContractEvent<
      WithdrawPartnerEvent.InputTuple,
      WithdrawPartnerEvent.OutputTuple,
      WithdrawPartnerEvent.OutputObject
    >;

    "WithdrawReferral(address,address,uint256)": TypedContractEvent<
      WithdrawReferralEvent.InputTuple,
      WithdrawReferralEvent.OutputTuple,
      WithdrawReferralEvent.OutputObject
    >;
    WithdrawReferral: TypedContractEvent<
      WithdrawReferralEvent.InputTuple,
      WithdrawReferralEvent.OutputTuple,
      WithdrawReferralEvent.OutputObject
    >;
  };
}
