/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace MvxMarket {
  export type MarketItemStruct = {
    itemId: BigNumberish;
    collection: AddressLike;
    tokenId: BigNumberish;
    seller: AddressLike;
    owner: AddressLike;
    quoteAsset: AddressLike;
    price: BigNumberish;
    listingTime: BigNumberish;
  };

  export type MarketItemStructOutput = [
    itemId: bigint,
    collection: string,
    tokenId: bigint,
    seller: string,
    owner: string,
    quoteAsset: string,
    price: bigint,
    listingTime: bigint
  ] & {
    itemId: bigint;
    collection: string;
    tokenId: bigint;
    seller: string;
    owner: string;
    quoteAsset: string;
    price: bigint;
    listingTime: bigint;
  };
}

export interface MvxMarketInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "_itemIds"
      | "_itemsSold"
      | "_listingPrice"
      | "buyItem"
      | "idToMarketItem"
      | "initialize"
      | "listItem"
      | "onERC721Received"
      | "owner"
      | "renounceOwnership"
      | "transferOwnership"
      | "updateListingPrice"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BuyItem"
      | "Initialized"
      | "ListItem"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(functionFragment: "_itemIds", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_itemsSold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_listingPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyItem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "idToMarketItem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "listItem",
    values: [MvxMarket.MarketItemStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateListingPrice",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "_itemIds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_itemsSold", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_listingPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyItem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "idToMarketItem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "listItem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateListingPrice",
    data: BytesLike
  ): Result;
}

export namespace BuyItemEvent {
  export type InputTuple = [_marketItem: MvxMarket.MarketItemStruct];
  export type OutputTuple = [_marketItem: MvxMarket.MarketItemStructOutput];
  export interface OutputObject {
    _marketItem: MvxMarket.MarketItemStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ListItemEvent {
  export type InputTuple = [_marketItem: MvxMarket.MarketItemStruct];
  export type OutputTuple = [_marketItem: MvxMarket.MarketItemStructOutput];
  export interface OutputObject {
    _marketItem: MvxMarket.MarketItemStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MvxMarket extends BaseContract {
  connect(runner?: ContractRunner | null): MvxMarket;
  waitForDeployment(): Promise<this>;

  interface: MvxMarketInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  _itemIds: TypedContractMethod<[], [bigint], "view">;

  _itemsSold: TypedContractMethod<[], [bigint], "view">;

  _listingPrice: TypedContractMethod<[], [bigint], "view">;

  buyItem: TypedContractMethod<[_itemId: BigNumberish], [void], "payable">;

  idToMarketItem: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint, string, string, string, bigint, bigint] & {
        itemId: bigint;
        collection: string;
        tokenId: bigint;
        seller: string;
        owner: string;
        quoteAsset: string;
        price: bigint;
        listingTime: bigint;
      }
    ],
    "view"
  >;

  initialize: TypedContractMethod<
    [_initListingPrice: BigNumberish],
    [void],
    "nonpayable"
  >;

  listItem: TypedContractMethod<
    [marketItem: MvxMarket.MarketItemStruct],
    [void],
    "payable"
  >;

  onERC721Received: TypedContractMethod<
    [
      operator: AddressLike,
      from: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateListingPrice: TypedContractMethod<
    [minListingPrice_: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "_itemIds"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "_itemsSold"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "_listingPrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "buyItem"
  ): TypedContractMethod<[_itemId: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "idToMarketItem"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint, string, string, string, bigint, bigint] & {
        itemId: bigint;
        collection: string;
        tokenId: bigint;
        seller: string;
        owner: string;
        quoteAsset: string;
        price: bigint;
        listingTime: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [_initListingPrice: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "listItem"
  ): TypedContractMethod<
    [marketItem: MvxMarket.MarketItemStruct],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "onERC721Received"
  ): TypedContractMethod<
    [
      operator: AddressLike,
      from: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateListingPrice"
  ): TypedContractMethod<
    [minListingPrice_: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "BuyItem"
  ): TypedContractEvent<
    BuyItemEvent.InputTuple,
    BuyItemEvent.OutputTuple,
    BuyItemEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "ListItem"
  ): TypedContractEvent<
    ListItemEvent.InputTuple,
    ListItemEvent.OutputTuple,
    ListItemEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "BuyItem(tuple)": TypedContractEvent<
      BuyItemEvent.InputTuple,
      BuyItemEvent.OutputTuple,
      BuyItemEvent.OutputObject
    >;
    BuyItem: TypedContractEvent<
      BuyItemEvent.InputTuple,
      BuyItemEvent.OutputTuple,
      BuyItemEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "ListItem(tuple)": TypedContractEvent<
      ListItemEvent.InputTuple,
      ListItemEvent.OutputTuple,
      ListItemEvent.OutputObject
    >;
    ListItem: TypedContractEvent<
      ListItemEvent.InputTuple,
      ListItemEvent.OutputTuple,
      ListItemEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
